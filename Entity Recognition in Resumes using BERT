{"metadata":{"colab":{"provenance":[],"mount_file_id":"1QB7zEbIVxeBoYD-GJk4lHohVT-KbgBmU","authorship_tag":"ABX9TyNkkLaJ7K8LT3bkVz3JtFol"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"widgets":{"application/vnd.jupyter.widget-state+json":{"6a4478a246d8490c9c993903d5e78e3d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_22959bdda98d426ea93fd3c3e74a66d7","IPY_MODEL_95af15a7203c45cd8cec3889c7b7eae9","IPY_MODEL_858dc7b116f843188ad6f669217fcc84"],"layout":"IPY_MODEL_0450671c81874c749a13aac42b4ec0ea"}},"22959bdda98d426ea93fd3c3e74a66d7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5d6c59fa39be4b44a590722d413dbec1","placeholder":"​","style":"IPY_MODEL_abda3492f67845b0a1df3227af5aacc3","value":"tokenizer_config.json: 100%"}},"95af15a7203c45cd8cec3889c7b7eae9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c7ff1fe74f494c53be210ed1bdbce3e4","max":49,"min":0,"orientation":"horizontal","style":"IPY_MODEL_047f15dde9bb44e1b69f9871025b64dd","value":49}},"858dc7b116f843188ad6f669217fcc84":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5d4a258a80ef4313bf22fa34b11c3c3c","placeholder":"​","style":"IPY_MODEL_bb42d4efbe4f4a28bb7e5430c6a8eaff","value":" 49.0/49.0 [00:00&lt;00:00, 710B/s]"}},"0450671c81874c749a13aac42b4ec0ea":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5d6c59fa39be4b44a590722d413dbec1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"abda3492f67845b0a1df3227af5aacc3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c7ff1fe74f494c53be210ed1bdbce3e4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"047f15dde9bb44e1b69f9871025b64dd":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5d4a258a80ef4313bf22fa34b11c3c3c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bb42d4efbe4f4a28bb7e5430c6a8eaff":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"466d9b056e884c3fb9ab74fa271ded4d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a358d0c0c8f34b55b2f5b0c72866cfe7","IPY_MODEL_12ec9aaf203444dfa5bc029924f8c6c1","IPY_MODEL_7c0015902d854544a65e7eebf42f6d70"],"layout":"IPY_MODEL_c4c22c83e68948e1ae489c4433d45879"}},"a358d0c0c8f34b55b2f5b0c72866cfe7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9150c0a591d648dd80362ba296992ed4","placeholder":"​","style":"IPY_MODEL_33369b0eaa474215bb4d51fcdda2bdf0","value":"vocab.txt: 100%"}},"12ec9aaf203444dfa5bc029924f8c6c1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_77fa49063de74e12b98454c3f08c75a1","max":213450,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a7c14a1303324a14ad31b6be98624551","value":213450}},"7c0015902d854544a65e7eebf42f6d70":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8f8ec982757d43d29d42f6008bed355f","placeholder":"​","style":"IPY_MODEL_187f8239035d44a0bbba8d71457a1170","value":" 213k/213k [00:00&lt;00:00, 606kB/s]"}},"c4c22c83e68948e1ae489c4433d45879":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9150c0a591d648dd80362ba296992ed4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"33369b0eaa474215bb4d51fcdda2bdf0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"77fa49063de74e12b98454c3f08c75a1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a7c14a1303324a14ad31b6be98624551":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8f8ec982757d43d29d42f6008bed355f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"187f8239035d44a0bbba8d71457a1170":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e8001bed92e24265a57a3440f79bc212":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5238fed1c1e74808b4d03e9f7ef6adea","IPY_MODEL_587d77863e9c47268f2242dc4beb1b9a","IPY_MODEL_cfb2d1b9cc00477b8c0718399d85809b"],"layout":"IPY_MODEL_211b47da46a14a8a8cf3a84279e93b6a"}},"5238fed1c1e74808b4d03e9f7ef6adea":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bce79c2c9a634205a0fd82be1335a526","placeholder":"​","style":"IPY_MODEL_948d30d3f47f427eaac55931713872cb","value":"tokenizer.json: 100%"}},"587d77863e9c47268f2242dc4beb1b9a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_35d79575816f48ad94ec193e2c91dd40","max":435797,"min":0,"orientation":"horizontal","style":"IPY_MODEL_82324d755de34def92850c68f26d6ddf","value":435797}},"cfb2d1b9cc00477b8c0718399d85809b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e1749dfefc584734b8bf7595ad2cb102","placeholder":"​","style":"IPY_MODEL_d4368c0abcd9437bba230c15c036aaaa","value":" 436k/436k [00:00&lt;00:00, 841kB/s]"}},"211b47da46a14a8a8cf3a84279e93b6a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bce79c2c9a634205a0fd82be1335a526":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"948d30d3f47f427eaac55931713872cb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"35d79575816f48ad94ec193e2c91dd40":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"82324d755de34def92850c68f26d6ddf":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e1749dfefc584734b8bf7595ad2cb102":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d4368c0abcd9437bba230c15c036aaaa":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"369fa6b38908486ea74b6b8612eaba69":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_985daa51dd7e434d980685a6c7436956","IPY_MODEL_6385a6344d494beaa0cba7a9ab7be197","IPY_MODEL_dacfb11830384723ac5d196438b182f0"],"layout":"IPY_MODEL_10cc0760c3ac4c34ba460135983e0bda"}},"985daa51dd7e434d980685a6c7436956":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a098df030c3145ff81747982e2dbe30f","placeholder":"​","style":"IPY_MODEL_1f971433e1f34d548008b6eccfe071d9","value":"config.json: 100%"}},"6385a6344d494beaa0cba7a9ab7be197":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e87cebdbfcc74a338d3c1de346fcd4d6","max":570,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b9094b0ccffb4cb895264fa7f4c8d90d","value":570}},"dacfb11830384723ac5d196438b182f0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2d6f9e8627f1495fb1deb91a7c65d130","placeholder":"​","style":"IPY_MODEL_277272446c0e4c749d2a10d379024569","value":" 570/570 [00:00&lt;00:00, 5.72kB/s]"}},"10cc0760c3ac4c34ba460135983e0bda":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a098df030c3145ff81747982e2dbe30f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1f971433e1f34d548008b6eccfe071d9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e87cebdbfcc74a338d3c1de346fcd4d6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b9094b0ccffb4cb895264fa7f4c8d90d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2d6f9e8627f1495fb1deb91a7c65d130":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"277272446c0e4c749d2a10d379024569":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"be218ef0b9c74d1f81fae0fe4e67379b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c70ed6220d934bb2835a2450aa689634","IPY_MODEL_09ac3989cd3e4b4b909fa66b78ec64db","IPY_MODEL_a1cc6d1277a7407d8cf007d099a5a1c3"],"layout":"IPY_MODEL_79a34a9d0349485b8ae90db04ca3bfc2"}},"c70ed6220d934bb2835a2450aa689634":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_65def23831e949068ccfa7fda8fbfe5c","placeholder":"​","style":"IPY_MODEL_9e65de75f8a74c2bb5a3bba705349d74","value":"model.safetensors: 100%"}},"09ac3989cd3e4b4b909fa66b78ec64db":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d921881e574e482f9bd36c1ee3157f5b","max":435755784,"min":0,"orientation":"horizontal","style":"IPY_MODEL_384b58e1be0b436ca601a9c79c15c6b0","value":435755784}},"a1cc6d1277a7407d8cf007d099a5a1c3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_92d9cc551f424e7299c3d6262da5002b","placeholder":"​","style":"IPY_MODEL_6b2cabbb78f24441a80352a5d121d780","value":" 436M/436M [00:07&lt;00:00, 61.2MB/s]"}},"79a34a9d0349485b8ae90db04ca3bfc2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"65def23831e949068ccfa7fda8fbfe5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9e65de75f8a74c2bb5a3bba705349d74":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d921881e574e482f9bd36c1ee3157f5b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"384b58e1be0b436ca601a9c79c15c6b0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"92d9cc551f424e7299c3d6262da5002b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6b2cabbb78f24441a80352a5d121d780":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9369761,"sourceType":"datasetVersion","datasetId":5682494}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport json\nimport numpy as np\nfrom tqdm import tqdm\nfrom tqdm import trange","metadata":{"id":"3iijiBb8gsa1","executionInfo":{"status":"ok","timestamp":1726134197356,"user_tz":-60,"elapsed":452,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:16:58.586847Z","iopub.execute_input":"2024-09-13T07:16:58.587223Z","iopub.status.idle":"2024-09-13T07:16:58.957998Z","shell.execute_reply.started":"2024-09-13T07:16:58.587186Z","shell.execute_reply":"2024-09-13T07:16:58.957005Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# Specify the path to your resume dataset JSON file in Google Drive\nfile_path = '/kaggle/input/resume-dataset/Entity Recognition in Resumes.json'\n\n# Load the resume dataset from JSON Lines file using pandas\nresume_data = pd.read_json(file_path, lines=True)","metadata":{"id":"wqL4Ze-jkiJJ","executionInfo":{"status":"ok","timestamp":1726134198853,"user_tz":-60,"elapsed":416,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:16:59.445126Z","iopub.execute_input":"2024-09-13T07:16:59.445713Z","iopub.status.idle":"2024-09-13T07:16:59.491645Z","shell.execute_reply.started":"2024-09-13T07:16:59.445642Z","shell.execute_reply":"2024-09-13T07:16:59.490748Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Function to preprocess resume data\ndef preprocess_resume_data(resume_data):\n    processed_data = []\n    \n    for _, resume in tqdm(resume_data.iterrows(), desc=\"Processing resumes\", total=len(resume_data)):\n        content = resume['content']\n        annotations = resume['annotation']\n\n        # Tokenize content into words\n        words = content.split()\n        labels = ['O'] * len(words)\n\n        for annotation in annotations:\n            if 'label' in annotation and annotation['label']:  # Ensure label exists\n                label = annotation['label'][0]\n                start = annotation['points'][0]['start']\n                end = annotation['points'][0]['end']\n\n                # Get start and end word indices\n                start_word = len(content[:start].split())\n                end_word = len(content[:end].split())\n\n                # Assign B- and I- labels to the words in the span\n                for i in range(start_word, end_word):\n                    if i < len(labels):\n                        labels[i] = f'B-{label}' if i == start_word else f'I-{label}'\n\n        # Break the text into sentences of max 50 words for labeling\n        for i in range(0, len(words), 50):\n            sentence_words = words[i:i+50]\n            sentence_labels = labels[i:i+50]\n\n            for word, label in zip(sentence_words, sentence_labels):\n                processed_data.append([len(processed_data) // 50 + 1, word, label])\n\n    return pd.DataFrame(processed_data, columns=['Sentence #', 'Word', 'Tag'])","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:17:00.228678Z","iopub.execute_input":"2024-09-13T07:17:00.229063Z","iopub.status.idle":"2024-09-13T07:17:00.239987Z","shell.execute_reply.started":"2024-09-13T07:17:00.229026Z","shell.execute_reply":"2024-09-13T07:17:00.238913Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Preprocess the resume data\ndata = preprocess_resume_data(resume_data)","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:17:01.185371Z","iopub.execute_input":"2024-09-13T07:17:01.185771Z","iopub.status.idle":"2024-09-13T07:17:01.542457Z","shell.execute_reply.started":"2024-09-13T07:17:01.185732Z","shell.execute_reply":"2024-09-13T07:17:01.541717Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"Processing resumes: 100%|██████████| 220/220 [00:00<00:00, 815.02it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Display the first few rows of the processed data\ndata.head(20)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"XZ3UGAtEmEYy","executionInfo":{"status":"ok","timestamp":1726134229118,"user_tz":-60,"elapsed":528,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"754a703b-3d07-4d06-e6ea-60dc828e59cd","execution":{"iopub.status.busy":"2024-09-13T07:17:02.038951Z","iopub.execute_input":"2024-09-13T07:17:02.039573Z","iopub.status.idle":"2024-09-13T07:17:02.054197Z","shell.execute_reply.started":"2024-09-13T07:17:02.039533Z","shell.execute_reply":"2024-09-13T07:17:02.053237Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"    Sentence #                                        Word  \\\n0            1                                    Abhishek   \n1            1                                         Jha   \n2            1                                 Application   \n3            1                                 Development   \n4            1                                   Associate   \n5            1                                           -   \n6            1                                   Accenture   \n7            1                                  Bengaluru,   \n8            1                                   Karnataka   \n9            1                                           -   \n10           1                                       Email   \n11           1                                          me   \n12           1                                          on   \n13           1                                     Indeed:   \n14           1  indeed.com/r/Abhishek-Jha/10e7a8cb732bc43a   \n15           1                                           •   \n16           1                                          To   \n17           1                                        work   \n18           1                                         for   \n19           1                                          an   \n\n                      Tag  \n0                  B-Name  \n1                  I-Name  \n2           B-Designation  \n3           I-Designation  \n4           I-Designation  \n5                       O  \n6   B-Companies worked at  \n7              B-Location  \n8                       O  \n9                       O  \n10                      O  \n11                      O  \n12                      O  \n13        B-Email Address  \n14        I-Email Address  \n15                      O  \n16                      O  \n17                      O  \n18                      O  \n19                      O  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sentence #</th>\n      <th>Word</th>\n      <th>Tag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Abhishek</td>\n      <td>B-Name</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Jha</td>\n      <td>I-Name</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Application</td>\n      <td>B-Designation</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Development</td>\n      <td>I-Designation</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Associate</td>\n      <td>I-Designation</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>-</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>Accenture</td>\n      <td>B-Companies worked at</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1</td>\n      <td>Bengaluru,</td>\n      <td>B-Location</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1</td>\n      <td>Karnataka</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1</td>\n      <td>-</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1</td>\n      <td>Email</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1</td>\n      <td>me</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1</td>\n      <td>on</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1</td>\n      <td>Indeed:</td>\n      <td>B-Email Address</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1</td>\n      <td>indeed.com/r/Abhishek-Jha/10e7a8cb732bc43a</td>\n      <td>I-Email Address</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1</td>\n      <td>•</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>1</td>\n      <td>To</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1</td>\n      <td>work</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>1</td>\n      <td>for</td>\n      <td>O</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>1</td>\n      <td>an</td>\n      <td>O</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Get unique tags\ntag_values = list(set(data['Tag'].values))\ntag_values.append(\"PAD\")\ntag2idx = {t: i for i, t in enumerate(tag_values)}\nprint(f\"Unique tags: {tag_values}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lj59umcNmOgj","executionInfo":{"status":"ok","timestamp":1726134258300,"user_tz":-60,"elapsed":568,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"a9848576-491c-4fd7-a93d-c36d804042e1","execution":{"iopub.status.busy":"2024-09-13T07:17:02.726620Z","iopub.execute_input":"2024-09-13T07:17:02.726993Z","iopub.status.idle":"2024-09-13T07:17:02.737567Z","shell.execute_reply.started":"2024-09-13T07:17:02.726957Z","shell.execute_reply":"2024-09-13T07:17:02.736531Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Unique tags: ['I-Skills', 'I-UNKNOWN', 'I-Email Address', 'I-College Name', 'B-UNKNOWN', 'O', 'B-Skills', 'B-Email Address', 'B-Designation', 'B-Name', 'B-Companies worked at', 'I-Name', 'I-Companies worked at', 'B-Years of Experience', 'B-College Name', 'I-Years of Experience', 'B-Graduation Year', 'B-Location', 'I-Designation', 'I-Location', 'B-Degree', 'I-Degree', 'PAD']\n","output_type":"stream"}]},{"cell_type":"code","source":"# Adjusted SentenceGetter class\nclass SentenceGetter(object):\n    def __init__(self, data):\n        self.n_sent = 1\n        self.data = data\n        agg_func = lambda s: [(w, t) for w, t in zip(s['Word'].values.tolist(), s['Tag'].values.tolist())]\n        self.grouped = self.data.groupby(\"Sentence #\").apply(agg_func).to_dict()\n        self.sentences = [s for s in self.grouped.values()]\n\n    def get_next(self):\n        sentence_key = f\"Sentence: {self.n_sent}\"\n        sentence = self.grouped.get(sentence_key, None)\n        self.n_sent += 1\n        return sentence","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:17:03.560789Z","iopub.execute_input":"2024-09-13T07:17:03.561602Z","iopub.status.idle":"2024-09-13T07:17:03.569153Z","shell.execute_reply.started":"2024-09-13T07:17:03.561559Z","shell.execute_reply":"2024-09-13T07:17:03.568156Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Example usage:\ngetter = SentenceGetter(data)\nsentences = [[word[0] for word in sentence] for sentence in getter.sentences]\nlabels = [[word[1] for word in sentence] for sentence in getter.sentences]\n\nprint(f\"Number of sentences: {len(sentences)}\")\nprint(f\"Example sentence: {sentences[0]}\")\nprint(f\"Example labels: {labels[0]}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:17:04.494767Z","iopub.execute_input":"2024-09-13T07:17:04.495575Z","iopub.status.idle":"2024-09-13T07:17:04.777066Z","shell.execute_reply.started":"2024-09-13T07:17:04.495537Z","shell.execute_reply":"2024-09-13T07:17:04.776112Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Number of sentences: 2279\nExample sentence: ['Abhishek', 'Jha', 'Application', 'Development', 'Associate', '-', 'Accenture', 'Bengaluru,', 'Karnataka', '-', 'Email', 'me', 'on', 'Indeed:', 'indeed.com/r/Abhishek-Jha/10e7a8cb732bc43a', '•', 'To', 'work', 'for', 'an', 'organization', 'which', 'provides', 'me', 'the', 'opportunity', 'to', 'improve', 'my', 'skills', 'and', 'knowledge', 'for', 'my', 'individual', 'and', \"company's\", 'growth', 'in', 'best', 'possible', 'ways.', 'Willing', 'to', 'relocate', 'to:', 'Bangalore,', 'Karnataka', 'WORK', 'EXPERIENCE']\nExample labels: ['B-Name', 'I-Name', 'B-Designation', 'I-Designation', 'I-Designation', 'O', 'B-Companies worked at', 'B-Location', 'O', 'O', 'O', 'O', 'O', 'B-Email Address', 'I-Email Address', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_193/1713855866.py:7: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  self.grouped = self.data.groupby(\"Sentence #\").apply(agg_func).to_dict()\n","output_type":"stream"}]},{"cell_type":"code","source":"getter = SentenceGetter(data)","metadata":{"id":"qoiWYttjmVqw","executionInfo":{"status":"ok","timestamp":1726134264285,"user_tz":-60,"elapsed":519,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:05.432614Z","iopub.execute_input":"2024-09-13T07:17:05.433015Z","iopub.status.idle":"2024-09-13T07:17:05.770764Z","shell.execute_reply.started":"2024-09-13T07:17:05.432978Z","shell.execute_reply":"2024-09-13T07:17:05.769734Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_193/1713855866.py:7: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  self.grouped = self.data.groupby(\"Sentence #\").apply(agg_func).to_dict()\n","output_type":"stream"}]},{"cell_type":"code","source":"sentences = [[word[0] for word in sentence] for sentence in getter.sentences]\nsentences[0]","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZpEzicOFmd6i","executionInfo":{"status":"ok","timestamp":1726134266146,"user_tz":-60,"elapsed":383,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"49eead83-869e-4913-ea84-9ce657795ff8","execution":{"iopub.status.busy":"2024-09-13T07:17:06.568981Z","iopub.execute_input":"2024-09-13T07:17:06.569375Z","iopub.status.idle":"2024-09-13T07:17:06.586584Z","shell.execute_reply.started":"2024-09-13T07:17:06.569336Z","shell.execute_reply":"2024-09-13T07:17:06.585627Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"['Abhishek',\n 'Jha',\n 'Application',\n 'Development',\n 'Associate',\n '-',\n 'Accenture',\n 'Bengaluru,',\n 'Karnataka',\n '-',\n 'Email',\n 'me',\n 'on',\n 'Indeed:',\n 'indeed.com/r/Abhishek-Jha/10e7a8cb732bc43a',\n '•',\n 'To',\n 'work',\n 'for',\n 'an',\n 'organization',\n 'which',\n 'provides',\n 'me',\n 'the',\n 'opportunity',\n 'to',\n 'improve',\n 'my',\n 'skills',\n 'and',\n 'knowledge',\n 'for',\n 'my',\n 'individual',\n 'and',\n \"company's\",\n 'growth',\n 'in',\n 'best',\n 'possible',\n 'ways.',\n 'Willing',\n 'to',\n 'relocate',\n 'to:',\n 'Bangalore,',\n 'Karnataka',\n 'WORK',\n 'EXPERIENCE']"},"metadata":{}}]},{"cell_type":"code","source":"labels = [[s[1] for s in sentence] for sentence in getter.sentences]\nprint(labels[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrIqaxj5moV6","executionInfo":{"status":"ok","timestamp":1726134269493,"user_tz":-60,"elapsed":549,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"1560bd02-fc04-4e4a-bdff-e69845276379","execution":{"iopub.status.busy":"2024-09-13T07:17:07.366012Z","iopub.execute_input":"2024-09-13T07:17:07.366396Z","iopub.status.idle":"2024-09-13T07:17:07.384502Z","shell.execute_reply.started":"2024-09-13T07:17:07.366358Z","shell.execute_reply":"2024-09-13T07:17:07.383369Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"['B-Name', 'I-Name', 'B-Designation', 'I-Designation', 'I-Designation', 'O', 'B-Companies worked at', 'B-Location', 'O', 'O', 'O', 'O', 'O', 'B-Email Address', 'I-Email Address', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertTokenizer, BertConfig\n\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\n\ntorch.__version__\n","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"ULk4BYgUnCjs","executionInfo":{"status":"ok","timestamp":1726134276558,"user_tz":-60,"elapsed":518,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"4a51b90f-d09e-4e5e-b845-98daadf997eb","execution":{"iopub.status.busy":"2024-09-13T07:17:08.293861Z","iopub.execute_input":"2024-09-13T07:17:08.294550Z","iopub.status.idle":"2024-09-13T07:17:14.094361Z","shell.execute_reply.started":"2024-09-13T07:17:08.294484Z","shell.execute_reply":"2024-09-13T07:17:14.093239Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"'2.4.0'"},"metadata":{}}]},{"cell_type":"code","source":"MAX_LEN = 75\nbs = 32","metadata":{"id":"7rV7K9RtnFUI","executionInfo":{"status":"ok","timestamp":1726134297326,"user_tz":-60,"elapsed":516,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:15.495928Z","iopub.execute_input":"2024-09-13T07:17:15.496592Z","iopub.status.idle":"2024-09-13T07:17:15.502714Z","shell.execute_reply.started":"2024-09-13T07:17:15.496553Z","shell.execute_reply":"2024-09-13T07:17:15.500786Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nn_gpu = torch.cuda.device_count()\nprint(n_gpu)","metadata":{"id":"vgpLUsNMnxW4","executionInfo":{"status":"ok","timestamp":1726134300864,"user_tz":-60,"elapsed":4,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:16.255944Z","iopub.execute_input":"2024-09-13T07:17:16.256735Z","iopub.status.idle":"2024-09-13T07:17:16.342276Z","shell.execute_reply.started":"2024-09-13T07:17:16.256688Z","shell.execute_reply":"2024-09-13T07:17:16.341266Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"torch.cuda.get_device_name(0)","metadata":{"id":"4HOlQVWnnyyS","executionInfo":{"status":"ok","timestamp":1726134331609,"user_tz":-60,"elapsed":398,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:17.066341Z","iopub.execute_input":"2024-09-13T07:17:17.067202Z","iopub.status.idle":"2024-09-13T07:17:17.076318Z","shell.execute_reply.started":"2024-09-13T07:17:17.067158Z","shell.execute_reply":"2024-09-13T07:17:17.075210Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"'Tesla T4'"},"metadata":{}}]},{"cell_type":"code","source":"tokenizer = BertTokenizer.from_pretrained('bert-base-cased', do_lower_case=False)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311,"referenced_widgets":["6a4478a246d8490c9c993903d5e78e3d","22959bdda98d426ea93fd3c3e74a66d7","95af15a7203c45cd8cec3889c7b7eae9","858dc7b116f843188ad6f669217fcc84","0450671c81874c749a13aac42b4ec0ea","5d6c59fa39be4b44a590722d413dbec1","abda3492f67845b0a1df3227af5aacc3","c7ff1fe74f494c53be210ed1bdbce3e4","047f15dde9bb44e1b69f9871025b64dd","5d4a258a80ef4313bf22fa34b11c3c3c","bb42d4efbe4f4a28bb7e5430c6a8eaff","466d9b056e884c3fb9ab74fa271ded4d","a358d0c0c8f34b55b2f5b0c72866cfe7","12ec9aaf203444dfa5bc029924f8c6c1","7c0015902d854544a65e7eebf42f6d70","c4c22c83e68948e1ae489c4433d45879","9150c0a591d648dd80362ba296992ed4","33369b0eaa474215bb4d51fcdda2bdf0","77fa49063de74e12b98454c3f08c75a1","a7c14a1303324a14ad31b6be98624551","8f8ec982757d43d29d42f6008bed355f","187f8239035d44a0bbba8d71457a1170","e8001bed92e24265a57a3440f79bc212","5238fed1c1e74808b4d03e9f7ef6adea","587d77863e9c47268f2242dc4beb1b9a","cfb2d1b9cc00477b8c0718399d85809b","211b47da46a14a8a8cf3a84279e93b6a","bce79c2c9a634205a0fd82be1335a526","948d30d3f47f427eaac55931713872cb","35d79575816f48ad94ec193e2c91dd40","82324d755de34def92850c68f26d6ddf","e1749dfefc584734b8bf7595ad2cb102","d4368c0abcd9437bba230c15c036aaaa","369fa6b38908486ea74b6b8612eaba69","985daa51dd7e434d980685a6c7436956","6385a6344d494beaa0cba7a9ab7be197","dacfb11830384723ac5d196438b182f0","10cc0760c3ac4c34ba460135983e0bda","a098df030c3145ff81747982e2dbe30f","1f971433e1f34d548008b6eccfe071d9","e87cebdbfcc74a338d3c1de346fcd4d6","b9094b0ccffb4cb895264fa7f4c8d90d","2d6f9e8627f1495fb1deb91a7c65d130","277272446c0e4c749d2a10d379024569"]},"id":"oexYRkOwn4ro","executionInfo":{"status":"ok","timestamp":1726134346857,"user_tz":-60,"elapsed":5130,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"3913426a-1620-464f-ac51-06ea65bf9e31","execution":{"iopub.status.busy":"2024-09-13T07:17:17.777194Z","iopub.execute_input":"2024-09-13T07:17:17.778077Z","iopub.status.idle":"2024-09-13T07:17:17.979902Z","shell.execute_reply.started":"2024-09-13T07:17:17.778032Z","shell.execute_reply":"2024-09-13T07:17:17.978903Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"def tokenize_and_preserve_labels(sentence, text_labels):\n    tokenized_sentence = []\n    labels = []\n\n    for word, label in zip(sentence, text_labels):\n\n        # Tokenize the word and count # of subwords the word is broken into\n        tokenized_word = tokenizer.tokenize(word)\n        n_subwords = len(tokenized_word)\n\n        # Add the tokenized word to the final tokenized word list\n        tokenized_sentence.extend(tokenized_word)\n\n        # Add the same label to the new list of labels `n_subwords` times\n        labels.extend([label] * n_subwords)\n\n    return tokenized_sentence, labels\n","metadata":{"id":"dLr4Iwtwn85z","executionInfo":{"status":"ok","timestamp":1726134359271,"user_tz":-60,"elapsed":618,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:29.688270Z","iopub.execute_input":"2024-09-13T07:17:29.688962Z","iopub.status.idle":"2024-09-13T07:17:29.694590Z","shell.execute_reply.started":"2024-09-13T07:17:29.688918Z","shell.execute_reply":"2024-09-13T07:17:29.693621Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"tokenized_texts_and_labels = [\n    tokenize_and_preserve_labels(sent, labs)\n    for sent, labs in zip(sentences, labels)\n]\n","metadata":{"id":"QEDwzYWWoBAx","executionInfo":{"status":"ok","timestamp":1726134379220,"user_tz":-60,"elapsed":10482,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:30.955361Z","iopub.execute_input":"2024-09-13T07:17:30.955774Z","iopub.status.idle":"2024-09-13T07:17:37.385003Z","shell.execute_reply.started":"2024-09-13T07:17:30.955735Z","shell.execute_reply":"2024-09-13T07:17:37.384139Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"tokenized_texts = [token_label_pair[0] for token_label_pair in tokenized_texts_and_labels]\nlabels = [token_label_pair[1] for token_label_pair in tokenized_texts_and_labels]\n","metadata":{"id":"ssqXjhoZoDf6","executionInfo":{"status":"ok","timestamp":1726134383394,"user_tz":-60,"elapsed":505,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:39.441763Z","iopub.execute_input":"2024-09-13T07:17:39.442154Z","iopub.status.idle":"2024-09-13T07:17:39.448505Z","shell.execute_reply.started":"2024-09-13T07:17:39.442115Z","shell.execute_reply":"2024-09-13T07:17:39.447313Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"input_ids = pad_sequences([tokenizer.convert_tokens_to_ids(txt) for txt in tokenized_texts],\n                          maxlen=MAX_LEN, dtype=\"long\", value=0.0,\n                          truncating=\"post\", padding=\"post\")\n","metadata":{"id":"ulW-nHtToG9O","executionInfo":{"status":"ok","timestamp":1726134392714,"user_tz":-60,"elapsed":780,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:40.551177Z","iopub.execute_input":"2024-09-13T07:17:40.551600Z","iopub.status.idle":"2024-09-13T07:17:40.800340Z","shell.execute_reply.started":"2024-09-13T07:17:40.551553Z","shell.execute_reply":"2024-09-13T07:17:40.799564Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"tags = pad_sequences([[tag2idx.get(l) for l in lab] for lab in labels],\n                     maxlen=MAX_LEN, value=tag2idx[\"PAD\"], padding=\"post\",\n                     dtype=\"long\", truncating=\"post\")\n","metadata":{"id":"NI3WKSokoJKU","executionInfo":{"status":"ok","timestamp":1726134402970,"user_tz":-60,"elapsed":406,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:41.741845Z","iopub.execute_input":"2024-09-13T07:17:41.742566Z","iopub.status.idle":"2024-09-13T07:17:41.803062Z","shell.execute_reply.started":"2024-09-13T07:17:41.742517Z","shell.execute_reply":"2024-09-13T07:17:41.802208Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"attention_masks = [[float(i != 0.0) for i in ii] for ii in input_ids]\n","metadata":{"id":"622dAUHGoLwl","executionInfo":{"status":"ok","timestamp":1726134412815,"user_tz":-60,"elapsed":897,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:42.770940Z","iopub.execute_input":"2024-09-13T07:17:42.771887Z","iopub.status.idle":"2024-09-13T07:17:43.288132Z","shell.execute_reply.started":"2024-09-13T07:17:42.771841Z","shell.execute_reply":"2024-09-13T07:17:43.287259Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"tr_inputs, val_inputs, tr_tags, val_tags = train_test_split(input_ids, tags,\n                                                            random_state=2018, test_size=0.1)\ntr_masks, val_masks, _, _ = train_test_split(attention_masks, input_ids,\n                                             random_state=2018, test_size=0.1)\n","metadata":{"id":"iVvd5_I2oOC2","executionInfo":{"status":"ok","timestamp":1726134422213,"user_tz":-60,"elapsed":425,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:47.065228Z","iopub.execute_input":"2024-09-13T07:17:47.066042Z","iopub.status.idle":"2024-09-13T07:17:47.077750Z","shell.execute_reply.started":"2024-09-13T07:17:47.066004Z","shell.execute_reply":"2024-09-13T07:17:47.076737Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"tr_inputs = torch.tensor(tr_inputs)\nval_inputs = torch.tensor(val_inputs)\ntr_tags = torch.tensor(tr_tags)\nval_tags = torch.tensor(val_tags)\ntr_masks = torch.tensor(tr_masks)\nval_masks = torch.tensor(val_masks)\n","metadata":{"id":"Fgei-vi4oQdB","executionInfo":{"status":"ok","timestamp":1726134432308,"user_tz":-60,"elapsed":419,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:48.271503Z","iopub.execute_input":"2024-09-13T07:17:48.272657Z","iopub.status.idle":"2024-09-13T07:17:48.329659Z","shell.execute_reply.started":"2024-09-13T07:17:48.272610Z","shell.execute_reply":"2024-09-13T07:17:48.328729Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"train_data = TensorDataset(tr_inputs, tr_masks, tr_tags)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=bs)\n\nvalid_data = TensorDataset(val_inputs, val_masks, val_tags)\nvalid_sampler = SequentialSampler(valid_data)\nvalid_dataloader = DataLoader(valid_data, sampler=valid_sampler, batch_size=bs)\n","metadata":{"id":"3S1bL4qtoS52","executionInfo":{"status":"ok","timestamp":1726134441917,"user_tz":-60,"elapsed":450,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:17:49.453701Z","iopub.execute_input":"2024-09-13T07:17:49.454577Z","iopub.status.idle":"2024-09-13T07:17:49.460547Z","shell.execute_reply.started":"2024-09-13T07:17:49.454533Z","shell.execute_reply":"2024-09-13T07:17:49.459450Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"import transformers\nfrom transformers import BertForTokenClassification, AdamW\n\ntransformers.__version__\n","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"FQdwtSkOoVQY","executionInfo":{"status":"ok","timestamp":1726134456836,"user_tz":-60,"elapsed":3966,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"e8482540-ad13-428e-a1cc-ca15b5da597e","execution":{"iopub.status.busy":"2024-09-13T07:17:50.918567Z","iopub.execute_input":"2024-09-13T07:17:50.919536Z","iopub.status.idle":"2024-09-13T07:17:51.457981Z","shell.execute_reply.started":"2024-09-13T07:17:50.919492Z","shell.execute_reply":"2024-09-13T07:17:51.456968Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"'4.44.0'"},"metadata":{}}]},{"cell_type":"code","source":"model = BertForTokenClassification.from_pretrained(\n    \"bert-base-cased\",\n    num_labels=len(tag2idx),\n    output_attentions = False,\n    output_hidden_states = False\n)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105,"referenced_widgets":["be218ef0b9c74d1f81fae0fe4e67379b","c70ed6220d934bb2835a2450aa689634","09ac3989cd3e4b4b909fa66b78ec64db","a1cc6d1277a7407d8cf007d099a5a1c3","79a34a9d0349485b8ae90db04ca3bfc2","65def23831e949068ccfa7fda8fbfe5c","9e65de75f8a74c2bb5a3bba705349d74","d921881e574e482f9bd36c1ee3157f5b","384b58e1be0b436ca601a9c79c15c6b0","92d9cc551f424e7299c3d6262da5002b","6b2cabbb78f24441a80352a5d121d780"]},"id":"Jxpy0oARoYAy","executionInfo":{"status":"ok","timestamp":1726134473363,"user_tz":-60,"elapsed":8732,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"98c3ed30-16c5-42b2-a4da-99549dda65d2","execution":{"iopub.status.busy":"2024-09-13T07:17:52.408145Z","iopub.execute_input":"2024-09-13T07:17:52.409479Z","iopub.status.idle":"2024-09-13T07:17:52.714999Z","shell.execute_reply.started":"2024-09-13T07:17:52.409423Z","shell.execute_reply":"2024-09-13T07:17:52.714099Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stderr","text":"A parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nSome weights of BertForTokenClassification were not initialized from the model checkpoint at bert-base-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"model.cuda()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oSKFnTv6oa5o","executionInfo":{"status":"ok","timestamp":1726134478194,"user_tz":-60,"elapsed":498,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"5c79f955-b33a-4459-b9a9-0c69f5009b61","execution":{"iopub.status.busy":"2024-09-13T07:17:53.766246Z","iopub.execute_input":"2024-09-13T07:17:53.767257Z","iopub.status.idle":"2024-09-13T07:17:54.038118Z","shell.execute_reply.started":"2024-09-13T07:17:53.767210Z","shell.execute_reply":"2024-09-13T07:17:54.037039Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"BertForTokenClassification(\n  (bert): BertModel(\n    (embeddings): BertEmbeddings(\n      (word_embeddings): Embedding(28996, 768, padding_idx=0)\n      (position_embeddings): Embedding(512, 768)\n      (token_type_embeddings): Embedding(2, 768)\n      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (encoder): BertEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x BertLayer(\n          (attention): BertAttention(\n            (self): BertSdpaSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=True)\n              (key): Linear(in_features=768, out_features=768, bias=True)\n              (value): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (output): BertSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n          (intermediate): BertIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): BertOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n            (dropout): Dropout(p=0.1, inplace=False)\n          )\n        )\n      )\n    )\n  )\n  (dropout): Dropout(p=0.1, inplace=False)\n  (classifier): Linear(in_features=768, out_features=23, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"FULL_FINETUNING = True\nif FULL_FINETUNING:\n    param_optimizer = list(model.named_parameters())\n    no_decay = ['bias', 'gamma', 'beta']\n    optimizer_grouped_parameters = [\n        {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n         'weight_decay_rate': 0.01},\n        {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],\n         'weight_decay_rate': 0.0}\n    ]\nelse:\n    param_optimizer = list(model.classifier.named_parameters())\n    optimizer_grouped_parameters = [{\"params\": [p for n, p in param_optimizer]}]\n\noptimizer = AdamW(\n    optimizer_grouped_parameters,\n    lr=3e-5,\n    eps=1e-8\n)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jUGgxBL_oeGK","executionInfo":{"status":"ok","timestamp":1726134491657,"user_tz":-60,"elapsed":954,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"6faf4794-a808-4391-f8db-2a8b0ee9039f","execution":{"iopub.status.busy":"2024-09-13T07:20:49.058012Z","iopub.execute_input":"2024-09-13T07:20:49.058416Z","iopub.status.idle":"2024-09-13T07:20:49.070792Z","shell.execute_reply.started":"2024-09-13T07:20:49.058377Z","shell.execute_reply":"2024-09-13T07:20:49.069988Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"from transformers import get_linear_schedule_with_warmup\n\nepochs = 10\nmax_grad_norm = 1.0\n\n# Total number of training steps is number of batches * number of epochs.\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(\n    optimizer,\n    num_warmup_steps=0,\n    num_training_steps=total_steps\n)\n","metadata":{"id":"07Nen7SWohRW","executionInfo":{"status":"ok","timestamp":1726134514792,"user_tz":-60,"elapsed":514,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:23:41.134985Z","iopub.execute_input":"2024-09-13T07:23:41.135455Z","iopub.status.idle":"2024-09-13T07:23:41.142729Z","shell.execute_reply.started":"2024-09-13T07:23:41.135409Z","shell.execute_reply":"2024-09-13T07:23:41.141851Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"!pip install seqeval","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U4aDutXJonB8","executionInfo":{"status":"ok","timestamp":1726134531117,"user_tz":-60,"elapsed":13089,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"outputId":"85c3685b-bf6a-47d1-9314-e54920d7e558","execution":{"iopub.status.busy":"2024-09-13T07:23:41.804542Z","iopub.execute_input":"2024-09-13T07:23:41.805554Z","iopub.status.idle":"2024-09-13T07:23:54.621727Z","shell.execute_reply.started":"2024-09-13T07:23:41.805503Z","shell.execute_reply":"2024-09-13T07:23:54.620620Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Requirement already satisfied: seqeval in /opt/conda/lib/python3.10/site-packages (1.2.2)\nRequirement already satisfied: numpy>=1.14.0 in /opt/conda/lib/python3.10/site-packages (from seqeval) (1.26.4)\nRequirement already satisfied: scikit-learn>=0.21.3 in /opt/conda/lib/python3.10/site-packages (from seqeval) (1.2.2)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (1.14.0)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (3.5.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"from seqeval.metrics import f1_score, accuracy_score","metadata":{"id":"4F1TWAElon82","executionInfo":{"status":"ok","timestamp":1726134531771,"user_tz":-60,"elapsed":2,"user":{"displayName":"aljebra school","userId":"12496841207460953602"}},"execution":{"iopub.status.busy":"2024-09-13T07:23:54.624131Z","iopub.execute_input":"2024-09-13T07:23:54.624506Z","iopub.status.idle":"2024-09-13T07:23:54.629509Z","shell.execute_reply.started":"2024-09-13T07:23:54.624470Z","shell.execute_reply":"2024-09-13T07:23:54.628440Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"## Store the average loss after each epoch so we can plot them.\nloss_values, validation_loss_values = [], []\n\nfor _ in trange(epochs, desc=\"Epoch\"):\n    # ========================================\n    #               Training\n    # ========================================\n    # Perform one full pass over the training set.\n\n    # Put the model into training mode.\n    model.train()\n    # Reset the total loss for this epoch.\n    total_loss = 0\n\n    # Training loop\n    for step, batch in enumerate(train_dataloader):\n        # add batch to gpu\n        batch = tuple(t.to(device) for t in batch)\n        b_input_ids, b_input_mask, b_labels = batch\n        # Always clear any previously calculated gradients before performing a backward pass.\n        model.zero_grad()\n        # forward pass\n        # This will return the loss (rather than the model output)\n        # because we have provided the `labels`.\n        outputs = model(b_input_ids, token_type_ids=None,\n                        attention_mask=b_input_mask, labels=b_labels)\n        # get the loss\n        loss = outputs[0]\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n        # track train loss\n        total_loss += loss.item()\n        # Clip the norm of the gradient\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(parameters=model.parameters(), max_norm=max_grad_norm)\n        # update parameters\n        optimizer.step()\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over the training data.\n    avg_train_loss = total_loss / len(train_dataloader)\n    print(\"Average train loss: {}\".format(avg_train_loss))\n\n    # Store the loss value for plotting the learning curve.\n    loss_values.append(avg_train_loss)\n\n\n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    # Put the model into evaluation mode\n    model.eval()\n    # Reset the validation loss for this epoch.\n    eval_loss, eval_accuracy = 0, 0\n    nb_eval_steps, nb_eval_examples = 0, 0\n    predictions , true_labels = [], []\n    for batch in valid_dataloader:\n        batch = tuple(t.to(device) for t in batch)\n        b_input_ids, b_input_mask, b_labels = batch\n\n        # Telling the model not to compute or store gradients,\n        # saving memory and speeding up validation\n        with torch.no_grad():\n            # Forward pass, calculate logit predictions.\n            # This will return the logits rather than the loss because we have not provided labels.\n            outputs = model(b_input_ids, token_type_ids=None,\n                            attention_mask=b_input_mask, labels=b_labels)\n        # Move logits and labels to CPU\n        logits = outputs[1].detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences.\n        eval_loss += outputs[0].mean().item()\n        predictions.extend([list(p) for p in np.argmax(logits, axis=2)])\n        true_labels.extend(label_ids)\n\n    eval_loss = eval_loss / len(valid_dataloader)\n    validation_loss_values.append(eval_loss)\n    print(\"Validation loss: {}\".format(eval_loss))\n\n    # Modify the F1-score calculation by ignoring 'PAD' tokens\n    pred_tags = [\n        [tag_values[p_i] for p_i, l_i in zip(p, l) if tag_values[l_i] != \"PAD\"]\n        for p, l in zip(predictions, true_labels)\n    ]\n    valid_tags = [\n        [tag_values[l_i] for l_i in l if tag_values[l_i] != \"PAD\"]\n        for l in true_labels\n    ]\n\n    # Now calculate the validation metrics\n    print(\"Validation Accuracy: {}\".format(accuracy_score(pred_tags, valid_tags)))\n    print(\"Validation F1-Score: {}\".format(f1_score(pred_tags, valid_tags)))\n    print()\n","metadata":{"id":"1VbIWdkcorO1","execution":{"iopub.status.busy":"2024-09-13T07:23:54.630818Z","iopub.execute_input":"2024-09-13T07:23:54.631087Z","iopub.status.idle":"2024-09-13T07:28:38.830124Z","shell.execute_reply.started":"2024-09-13T07:23:54.631058Z","shell.execute_reply":"2024-09-13T07:28:38.829022Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stderr","text":"Epoch:   0%|          | 0/10 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Average train loss: 0.11220996081829071\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  10%|█         | 1/10 [00:28<04:14, 28.33s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.28560287971049547\nValidation Accuracy: 0.9264250591877617\nValidation F1-Score: 0.5367316341829085\n\nAverage train loss: 0.09914343440188811\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  20%|██        | 2/10 [00:57<03:49, 28.67s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.2796982889994979\nValidation Accuracy: 0.9283676318824744\nValidation F1-Score: 0.5450612833453496\n\nAverage train loss: 0.08137118796316477\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  30%|███       | 3/10 [01:25<03:19, 28.50s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.2787076225504279\nValidation Accuracy: 0.9270321131548594\nValidation F1-Score: 0.5551020408163265\n\nAverage train loss: 0.061213260737713424\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  40%|████      | 4/10 [01:53<02:50, 28.43s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.2815327625721693\nValidation Accuracy: 0.9300673829903479\nValidation F1-Score: 0.5694635488308116\n\nAverage train loss: 0.050120556813019974\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  50%|█████     | 5/10 [02:22<02:22, 28.43s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.2999345539137721\nValidation Accuracy: 0.9316457233048018\nValidation F1-Score: 0.57909604519774\n\nAverage train loss: 0.03967675205606681\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  60%|██████    | 6/10 [02:50<01:53, 28.41s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.29689989145845175\nValidation Accuracy: 0.9289139804528622\nValidation F1-Score: 0.586013986013986\n\nAverage train loss: 0.03305137428240134\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  70%|███████   | 7/10 [03:19<01:25, 28.39s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.30290224868804216\nValidation Accuracy: 0.9360772172646148\nValidation F1-Score: 0.6071964017991004\n\nAverage train loss: 0.029220894562940185\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  80%|████████  | 8/10 [03:47<00:56, 28.40s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.307057217694819\nValidation Accuracy: 0.932374188065319\nValidation F1-Score: 0.6040931545518702\n\nAverage train loss: 0.024727070518733504\n","output_type":"stream"},{"name":"stderr","text":"Epoch:  90%|█████████ | 9/10 [04:15<00:28, 28.39s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.32061060052365065\nValidation Accuracy: 0.9292782128331208\nValidation F1-Score: 0.5977175463623395\n\nAverage train loss: 0.023525342488518126\n","output_type":"stream"},{"name":"stderr","text":"Epoch: 100%|██████████| 10/10 [04:44<00:00, 28.42s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.3103581313043833\nValidation Accuracy: 0.9340132337764827\nValidation F1-Score: 0.6077586206896551\n\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(loss_values, 'b-o', label=\"training loss\")\nplt.plot(validation_loss_values, 'r-o', label=\"validation loss\")\n\n# Label the plot.\nplt.title(\"Learning curve\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\nplt.show()\n","metadata":{"id":"l-OWEs3qo2J7","execution":{"iopub.status.busy":"2024-09-13T07:28:42.947836Z","iopub.execute_input":"2024-09-13T07:28:42.948471Z","iopub.status.idle":"2024-09-13T07:28:43.400047Z","shell.execute_reply.started":"2024-09-13T07:28:42.948429Z","shell.execute_reply":"2024-09-13T07:28:43.399101Z"},"trusted":true},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import os\n\n# Define the path for the new folder\nnew_folder_path = '/kaggle/working/model_output'\n\n# Create the new folder\nos.makedirs(new_folder_path, exist_ok=True)\n\nprint(f\"Folder created at: {new_folder_path}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:30:15.515449Z","iopub.execute_input":"2024-09-13T07:30:15.515917Z","iopub.status.idle":"2024-09-13T07:30:15.521801Z","shell.execute_reply.started":"2024-09-13T07:30:15.515869Z","shell.execute_reply":"2024-09-13T07:30:15.520812Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"Folder created at: /kaggle/working/model_output\n","output_type":"stream"}]},{"cell_type":"code","source":"model.save_pretrained(new_folder_path)\ntokenizer.save_pretrained(new_folder_path)\n\nprint(\"Model and tokenizer saved!\")","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:30:21.065403Z","iopub.execute_input":"2024-09-13T07:30:21.066274Z","iopub.status.idle":"2024-09-13T07:30:22.571362Z","shell.execute_reply.started":"2024-09-13T07:30:21.066230Z","shell.execute_reply":"2024-09-13T07:30:22.570333Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"Model and tokenizer saved!\n","output_type":"stream"}]},{"cell_type":"code","source":"test_sentence = \"\"\"\n  ANUVA GOYAL D.O.B.: 1st October 2000 Gender: Female OBJECTIVE Energetic,\n   innovative engineering undergraduate, passionate about Machine Learning,\n   NLP and Deep Learning for solving real-world problems, aiming to work in an organization providing great learning experience and growth opportunities\n   for mutual benefit. EDUCATION Qualification Institute CGPA Year of Completion B.Tech. Dayalbagh Educational Institute,\n   CGPA 9.35 2023 (Electrical Engineering (Till 4 Dayalbagh, Agra Pursuing Specialization in Computer Science) semesters)\n   \n\"\"\"\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:29:21.625189Z","iopub.execute_input":"2024-09-13T07:29:21.625940Z","iopub.status.idle":"2024-09-13T07:29:21.630911Z","shell.execute_reply.started":"2024-09-13T07:29:21.625898Z","shell.execute_reply":"2024-09-13T07:29:21.629913Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"tokenized_sentence = tokenizer.encode(test_sentence)\ninput_ids = torch.tensor([tokenized_sentence]).cuda()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:29:24.945656Z","iopub.execute_input":"2024-09-13T07:29:24.946537Z","iopub.status.idle":"2024-09-13T07:29:24.960428Z","shell.execute_reply.started":"2024-09-13T07:29:24.946471Z","shell.execute_reply":"2024-09-13T07:29:24.959268Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"with torch.no_grad():\n    output = model(input_ids)\nlabel_indices = np.argmax(output[0].to('cpu').numpy(), axis=2)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:29:25.580300Z","iopub.execute_input":"2024-09-13T07:29:25.581592Z","iopub.status.idle":"2024-09-13T07:29:25.636774Z","shell.execute_reply.started":"2024-09-13T07:29:25.581534Z","shell.execute_reply":"2024-09-13T07:29:25.635641Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"# join bpe split tokens\ntokens = tokenizer.convert_ids_to_tokens(input_ids.to('cpu').numpy()[0])\nnew_tokens, new_labels = [], []\nfor token, label_idx in zip(tokens, label_indices[0]):\n    if token.startswith(\"##\"):\n        new_tokens[-1] = new_tokens[-1] + token[2:]\n    else:\n        new_labels.append(tag_values[label_idx])\n        new_tokens.append(token)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:29:27.653442Z","iopub.execute_input":"2024-09-13T07:29:27.654290Z","iopub.status.idle":"2024-09-13T07:29:27.665853Z","shell.execute_reply.started":"2024-09-13T07:29:27.654226Z","shell.execute_reply":"2024-09-13T07:29:27.664847Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"for token, label in zip(new_tokens, new_labels):\n    print(\"{}\\t{}\".format(label, token))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T07:29:28.851738Z","iopub.execute_input":"2024-09-13T07:29:28.852478Z","iopub.status.idle":"2024-09-13T07:29:28.858429Z","shell.execute_reply.started":"2024-09-13T07:29:28.852438Z","shell.execute_reply":"2024-09-13T07:29:28.857544Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"O\t[CLS]\nO\tANUVA\nO\tGOYAL\nB-Degree\tD\nB-Degree\t.\nB-Degree\tO\nB-Degree\t.\nO\tB\nO\t.\nO\t:\nO\t1st\nO\tOctober\nO\t2000\nO\tGender\nO\t:\nO\tFemale\nO\tOBJECTIVE\nO\tEnergetic\nO\t,\nO\tinnovative\nO\tengineering\nO\tundergraduate\nO\t,\nO\tpassionate\nO\tabout\nO\tMachine\nO\tLearning\nO\t,\nO\tNLP\nO\tand\nO\tDeep\nO\tLearning\nO\tfor\nO\tsolving\nO\treal\nO\t-\nO\tworld\nO\tproblems\nO\t,\nO\taiming\nO\tto\nO\twork\nO\tin\nO\tan\nO\torganization\nO\tproviding\nO\tgreat\nO\tlearning\nO\texperience\nO\tand\nO\tgrowth\nO\topportunities\nO\tfor\nO\tmutual\nO\tbenefit\nO\t.\nO\tEDUCATION\nB-Degree\tQualification\nO\tInstitute\nO\tCGPA\nO\tYear\nO\tof\nO\tCompletion\nB-Degree\tB\nB-Degree\t.\nB-Degree\tTech\nB-College Name\t.\nB-College Name\tDayalbagh\nI-College Name\tEducational\nI-College Name\tInstitute\nO\t,\nO\tCGPA\nO\t9\nO\t.\nO\t35\nO\t2023\nO\t(\nO\tElectrical\nO\tEngineering\nO\t(\nO\tTill\nO\t4\nO\tDayalbagh\nO\t,\nO\tAgra\nO\tPursuing\nO\tSpecialization\nO\tin\nO\tComputer\nO\tScience\nO\t)\nO\tsemesters\nO\t)\nO\t[SEP]\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}